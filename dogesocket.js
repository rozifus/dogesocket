(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  var SOCHAIN_API_KEY, options, pusher, ticker;

  console.log('start');

  Pusher.host = 'slanger1.chain.so';

  Pusher.ws_port = 443;

  Pusher.wss_port = 443;

  Pusher.log = function(msg) {
    return console.log(msg);
  };

  SOCHAIN_API_KEY = 'e9f5cc20074501ca7395';

  options = {
    encryption: true,
    disableStats: true,
    enabledTransports: ['ws'],
    disabledTransports: ['sockjs']
  };

  pusher = new Pusher(SOCHAIN_API_KEY, options);

  pusher.connection.bind('state_change', function(states) {
    return console.log("State:", states.current);
  });

  ticker = pusher.subscribe('blockchain_update_doge');

  ticker.bind('tx_update', function(data) {
    var unconfirmed_txs;
    console.log(data);
    if (data.type === "tx") {
      unconfirmed_txs = data.value && data.value.unconfirmed_txs;
      return $('#num-unconfirmed-tx').text(unconfirmed_txs);
    }
  });

  ticker.bind('block_update', function(data) {
    console.log(data);
    if (data.type === "block") {
      return console.log("data" + data);
    }
  });

  window.ticker = ticker;

}).call(this);

},{}]},{},[1]);
